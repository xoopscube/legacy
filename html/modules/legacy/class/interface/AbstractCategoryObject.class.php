<?php
/**
 * Abstract Category Class
 * This class is generated by Cube tool.
 * @package    Legacy
 * @version    XCL 2.5.0
 * @author     Other authors gigamaster, 2020 XCL/PHP7
 * @author     code generator
 * @copyright  (c) 2005-2024 The XOOPSCube Project
 * @license    GPL 2.0
 */

if (!defined('XOOPS_ROOT_PATH')) {
    exit();
}
require_once __DIR__ . '/AbstractObject.class.php';


abstract class Legacy_AbstractCategoryObject extends Legacy_AbstractObject
{
    public const PRIMARY = 'cat_id';
    public const DATANAME = 'cat';
    public $mChildren = [];    //Legacy_AbstractCategoryObject[]

    public function Legacy_AbstractCategoryObject()
    {
        self::__construct();
    }

    public function __construct()
    {
        $this->initVar('cat_id', XOBJ_DTYPE_INT, '', false);
        $this->initVar('title', XOBJ_DTYPE_STRING, '', false, 191);
        $this->initVar('p_id', XOBJ_DTYPE_INT, '0', false);
        $this->initVar('modules', XOBJ_DTYPE_TEXT, '', false);
        $this->initVar('description', XOBJ_DTYPE_TEXT, '', false);
        $this->initVar('weight', XOBJ_DTYPE_INT, '10', false);
        $this->initVar('options', XOBJ_DTYPE_TEXT, '', false);
    }

    /**
     * getPrimary
     *
     * @param	void
     *
     * @return	string
    **/
    public function getPrimary()
    {
        return self::PRIMARY;
    }

    /**
     * getDataname
     *
     * @param	void
     *
     * @return	string
    **/
    public function getDataname()
    {
        return self::DATANAME;
    }

    /**
     * getDepth
     *
     * @params	string $module
     *
     * @return int
     */
    abstract public function getDepth();

    /**
     * checkPermitByUid
     *
     * @param string $action
     * @param int $uid
     * @param string $module
     * @return bool
     */
    abstract public function checkPermitByUid( string $action, int $uid=0, string $module= '' );

    /**
     * checkPermitByGroupid
     *
     * @params    string    $action
     * @params    int    $groupid
     * @params    string    $module
     *
     * @param        $action
     * @param int    $groupid
     * @param string $module
     * @return bool
     */
    abstract public function checkPermitByGroupid(/*** string ***/ $action, /*** int ***/ $groupid=0, /*** string ***/ $module= '');

    /**
     * renderUri
     *
     * @param	string	$action
     *
     * @return	string
     */
    public function renderUri($action=null)
    {
        return Legacy_Utils::renderUri($this->getDirname(), $this->getDataname(), $this->get($this->getPrimary()), $action);
    }
}
